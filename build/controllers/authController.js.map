{"version":3,"sources":["../../src/controllers/authController.js"],"names":["bcrypt","require","jwt","exports","auth","req","res","next","token","header","verify","process","env","JWT_SECRET","err","decoded","status","message","signup","hashedPassword","hashSync","body","password","userData","name","isSeller","email","address","pincode","contact","User","create","then","user","sign","id","_id","expiresIn","send","catch","console","log","json","result","login","findOne","passwordIsValid","compareSync"],"mappings":"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","file":"authController.js","sourcesContent":["import User from '../models/userModel';\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\n\n//-------------------------------Auth MiddleWare-------------------\nexports.auth = (req, res, next) => {\n    let token = req.header('x-access-token');\n    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\n        if (err) {\n            err.status = 401;\n            err.message = 'No auth token provided';\n            next(err);\n        } else {\n            next();\n        }\n    });\n}\n\n//-------------------sign up ----------------------------------\n\nexports.signup = function (req, res) {\n    var hashedPassword = bcrypt.hashSync(req.body.password, 8);\n    var userData = {\n        name: req.body.name,\n        isSeller: req.body.isSeller,\n        email: req.body.email,\n        password: hashedPassword,\n        address: req.body.address,\n        pincode: req.body.pincode,\n        contact: req.body.contact\n    }\n\n    User.create(userData)\n        .then(function (user) {\n            // create a token\n            var token = jwt.sign({\n                id: user._id\n            }, process.env.JWT_SECRET, {\n                expiresIn: 86400 // expires in 24 hours\n            });\n            res.status(200).send({\n                auth: true,\n                token: token\n            });\n        })\n        .catch((err) => {\n            console.log(err);\n            res.json({\n                result: 'error'\n            });\n        });\n}\n//----------------Login ------------------------------------------\nexports.login = function(req, res){\n    User.findOne({\n        email: req.body.email\n    }, function (err, user) {\n        if (err) return res.status(500).send('Error on the server.');\n        if (!user) return res.status(404).send('User not found');\n        var passwordIsValid = bcrypt.compareSync(req.body.password, user.password);\n        if (!passwordIsValid) return res.status(401).send({\n            auth: false,\n            token: null\n        });\n        var token = jwt.sign({\n            id: user._id\n        }, process.env.JWT_SECRET, {\n            expiresIn: 86400\n        });\n        res.status(200).send({\n            auth: true,\n            token: token\n        });\n    });\n}"]}
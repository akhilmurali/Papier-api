{"version":3,"sources":["../../src/controllers/controller.js"],"names":["bcrypt","require","jwt","auth","req","res","next","token","header","verify","process","env","JWT_SECRET","err","decoded","status","message","exports","signup","hashedPassword","hashSync","body","password","userData","name","isSeller","email","address","pincode","contact","SeekKeep","create","then","user","sign","id","_id","expiresIn","send","catch","console","log","json","result"],"mappings":";;AACA;;;;AACA;;;;;;AACA,IAAIA,SAASC,QAAQ,UAAR,CAAb;AACA,IAAIC,MAAMD,QAAQ,cAAR,CAAV;AACA;AACA,IAAIE,OAAO,SAAPA,IAAO,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3B,QAAIC,QAAQH,IAAII,MAAJ,CAAW,gBAAX,CAAZ;AACAN,QAAIO,MAAJ,CAAWF,KAAX,EAAkBG,QAAQC,GAAR,CAAYC,UAA9B,EAA0C,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACxD,YAAID,GAAJ,EAAS;AACLA,gBAAIE,MAAJ,GAAa,GAAb;AACAF,gBAAIG,OAAJ,GAAc,wBAAd;AACAV,iBAAKO,GAAL;AACH,SAJD,MAIO;AACHP;AACH;AACJ,KARD;AASH,CAXD;;AAaA;;AAEAW,QAAQC,MAAR,GAAiB,UAAUd,GAAV,EAAeC,GAAf,EAAoB;AACjC,QAAIc,iBAAiBnB,OAAOoB,QAAP,CAAgBhB,IAAIiB,IAAJ,CAASC,QAAzB,EAAmC,CAAnC,CAArB;AACA,QAAIC,WAAW;AACXC,cAAMpB,IAAIiB,IAAJ,CAASG,IADJ;AAEXC,kBAAUrB,IAAIiB,IAAJ,CAASI,QAFR;AAGXC,eAAOtB,IAAIiB,IAAJ,CAASK,KAHL;AAIXJ,kBAAUH,cAJC;AAKXQ,iBAASvB,IAAIiB,IAAJ,CAASM,OALP;AAMXC,iBAASxB,IAAIiB,IAAJ,CAASO,OANP;AAOXC,iBAASzB,IAAIiB,IAAJ,CAASQ;AAPP,KAAf;;AAUAC,gCAASC,MAAT,CAAgBR,QAAhB,EACKS,IADL,CACU,UAAUC,IAAV,EAAgB;AAClB;AACA,YAAI1B,QAAQL,IAAIgC,IAAJ,CAAS;AACjBC,gBAAIF,KAAKG;AADQ,SAAT,EAET1B,QAAQC,GAAR,CAAYC,UAFH,EAEe;AACvByB,uBAAW,KADY,CACN;AADM,SAFf,CAAZ;AAKAhC,YAAIU,MAAJ,CAAW,GAAX,EAAgBuB,IAAhB,CAAqB;AACjBnC,kBAAM,IADW;AAEjBI,mBAAOA;AAFU,SAArB;AAIH,KAZL,EAaKgC,KAbL,CAaW,UAAC1B,GAAD,EAAS;AACZ2B,gBAAQC,GAAR,CAAY5B,GAAZ;AACAR,YAAIqC,IAAJ,CAAS;AACLC,oBAAQ;AADH,SAAT;AAGH,KAlBL;AAmBH,CA/BD","file":"controller.js","sourcesContent":["\nimport Book from '../models/bookModel';\nimport SeekKeep from '../models/seekerKeeperModel';\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\n//-------------------------------Auth MiddleWare-------------------\nvar auth = (req, res, next) => {\n    let token = req.header('x-access-token');\n    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\n        if (err) {\n            err.status = 401;\n            err.message = 'No auth token provided';\n            next(err);\n        } else {\n            next();\n        }\n    });\n}\n\n//-------------------sign up ----------------------------------\n\nexports.signup = function (req, res) {\n    var hashedPassword = bcrypt.hashSync(req.body.password, 8);\n    var userData = {\n        name: req.body.name,\n        isSeller: req.body.isSeller,\n        email: req.body.email,\n        password: hashedPassword,\n        address: req.body.address,\n        pincode: req.body.pincode,\n        contact: req.body.contact\n    }\n\n    SeekKeep.create(userData)\n        .then(function (user) {\n            // create a token\n            var token = jwt.sign({\n                id: user._id\n            }, process.env.JWT_SECRET, {\n                expiresIn: 86400 // expires in 24 hours\n            });\n            res.status(200).send({\n                auth: true,\n                token: token\n            });\n        })\n        .catch((err) => {\n            console.log(err);\n            res.json({\n                result: 'error'\n            });\n        });\n}"]}
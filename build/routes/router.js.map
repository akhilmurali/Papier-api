{"version":3,"sources":["../../src/routes/router.js"],"names":["bcrypt","require","jwt","router","express","Router","auth","req","res","next","token","header","verify","process","env","JWT_SECRET","err","decoded","status","message","post","hashedPassword","hashSync","body","password","userData","name","isSeller","email","address","pincode","contact","SeekKeep","create","then","user","sign","id","_id","expiresIn","send","catch","console","log","json","result","findOne","passwordIsValid","compareSync","get","Book","find","books","book","msg"],"mappings":"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","file":"router.js","sourcesContent":["import express from 'express';\nimport Book from '../models/bookModel';\nimport SeekKeep from '../models/seekerKeeperModel';\n\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\n\nlet router = express.Router();\n\n//-------------------------------Auth MiddleWare-------------------\nvar auth = (req, res, next) => {\n    let token = req.header('x-access-token');\n    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\n        if (err) {\n            err.status = 401;\n            err.message = 'No auth token provided';\n            next(err);\n        } else {\n            next();\n        }\n    });\n}\n//----------------------Sign Up----------------------------------------\nrouter.post('/signup', function (req, res) {\n    var hashedPassword = bcrypt.hashSync(req.body.password, 8);\n    var userData = {\n        name: req.body.name,\n        isSeller: req.body.isSeller,\n        email: req.body.email,\n        password: hashedPassword,\n        address: req.body.address,\n        pincode: req.body.pincode,\n        contact: req.body.contact\n    }\n\n    SeekKeep.create(userData)\n        .then(function (user) {\n            // create a token\n            var token = jwt.sign({\n                id: user._id\n            }, process.env.JWT_SECRET, {\n                expiresIn: 86400 // expires in 24 hours\n            });\n            res.status(200).send({\n                auth: true,\n                token: token\n            });\n        })\n        .catch((err) => {\n            console.log(err);\n            res.json({\n                result: 'error'\n            });\n        });\n})\n//-----------------------------Login ----------------------------------\nrouter.post('/login', function (req, res) {\n    SeekKeep.findOne({\n        email: req.body.email\n    }, function (err, user) {\n        if (err) return res.status(500).send('Error on the server.');\n        if (!user) return res.status(404).send('User not found');\n        var passwordIsValid = bcrypt.compareSync(req.body.password, user.password);\n        if (!passwordIsValid) return res.status(401).send({\n            auth: false,\n            token: null\n        });\n        var token = jwt.sign({\n            id: user._id\n        }, process.env.JWT_SECRET, {\n            expiresIn: 86400\n        });\n        res.status(200).send({\n            auth: true,\n            token: token\n        });\n    });\n});\n\n\n\n\nrouter.get('/book', (req, res) => {\n    Book.find({})\n        .then((books) => {\n            res.status(200).json({\n                books\n            });\n        })\n        .catch((err) => {\n            res.status(500).json({\n                err\n            })\n        });\n});\n\nrouter.post('/book', (req, res) => {\n    Book.create(req.body)\n        .then((book) => {\n            res.status(200).json({\n                book,\n                msg: 'successfully added book to the database'\n            });\n        })\n        .catch((err) => {\n            res.status(500).json({\n                err,\n                msg: 'Error inserting book into the database'\n            });\n        });\n});\n\nexport default router;"]}
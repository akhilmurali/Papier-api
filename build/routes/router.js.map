{"version":3,"sources":["../../src/routes/router.js"],"names":["controller","require","bookController","multer","router","express","Router","ejs","fs","path","bodyParser","post","signup","login","get","req","res","next","render","console","log","resolve","use","urlencoded","extended","storage","diskStorage","destination","file","callback","filename","fieldname","Date","now","extname","originalname","upload","single","bookData","Book","cloudinary","config","cloud_name","process","env","CLOUD_NAME","api_key","API_KEY","api_secret","API_SECRET","Originalpath","__dirname","pathimages","v2","uploader","error","result","url","description","body","save","err","redirect","getBooks","addBooks"],"mappings":"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","file":"router.js","sourcesContent":["import express from 'express';\nimport Book from '../models/bookModel';\n\nvar controller = require('../controllers/authController');\nvar bookController = require('../controllers/bookController');\nvar multer = require('multer');\nlet router = express.Router();\nvar ejs = require('ejs');\nvar fs = require('fs');\nvar path = require('path')\n\nvar multer = require('multer');\n\nvar bodyParser = require('body-parser');\n\n\n//----------------------Sign Up----------------------------------------\nrouter.post('/signup', controller.signup)\n//-----------------------------Login ----------------------------------\nrouter.post('/login', controller.login)\n\n\n//------------------Add  Books----------------------------\n\nrouter.get('/', function (req, res, next) {\n    res.render('index');\n})\n\n//router.use(express.static(__dirname + '../uploads'))\n\nconsole.log(\"using path.resolve---\", path.resolve('./uploads'));\nrouter.use(bodyParser.urlencoded({\n    extended: false\n}))\n\n\nvar storage = multer.diskStorage({\n    destination: function (req, file, callback) {\n        callback(null, path.resolve('./uploads'))\n    },\n    filename: function (req, file, callback) {\n        callback(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname))\n    }\n})\n\nvar upload = multer({\n    storage: storage\n})\n\nrouter.post('/file_upload', upload.single('file'), function (req, res) {\n    var bookData = new Book();\n    //--------cloudinary--------------\n    var cloudinary = require('cloudinary');\n    cloudinary.config({\n        cloud_name: process.env.CLOUD_NAME,\n        api_key: process.env.API_KEY,\n        api_secret: process.env.API_SECRET\n    });\n    //----------get the path from server-----------\n    var Originalpath = req.file.filename;\n    console.log(\"originalpath is ---\", Originalpath);\n    console.log(\"dir name----\", __dirname);\n    var pathimages = path.resolve(\"./uploads/\", Originalpath);\n    console.log(\"path----\", pathimages);\n\n    //--------& put it in cloudinary-------\n    cloudinary.v2.uploader.upload(pathimages,\n        function (error, result) {\n            if (error) {\n                console.log(error);\n            }\n            console.log(\"path2----\", pathimages)\n            bookData.path = result.url;\n            console.log(\"image ka path of cloudinary in db\", bookData.path)\n            console.log(\"the url to access\", result.url)\n\n            // fs.unlink(pathimages, (err) => {\n            //     if (err) {\n            //         console.log(\"failed to delete local image:\" + err);\n            //     } else {\n            //         console.log('successfully deleted ' + pathimages + ' local image');\n            //     }\n            // });\n\n\n            //----------get the cloudinary URL & save in db-------------\n            console.log(\"confirm vahi image.path hai ki nai\", bookData.path)\n            bookData.description = req.body.description\n            bookData.save(function (err) {\n                if (err) return next(err)\n                return res.redirect('/images')\n            })\n        });\n\n\n})\n\n\n//-----------------Get All Books----------------------\nrouter.get('/getBooks', bookController.getBooks)\n\n\n\nrouter.post('/addBooks', bookController.addBooks)\n\n\nexport default router;"]}